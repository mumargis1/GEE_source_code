// Import administrative borders and select the gadm level 
// (0=country, 1=region, 2=district, 3=ward)
var area = ee.FeatureCollection('users/salmanatif/hybas_as_lev08');
print('area', area);
Map.centerObject(area, 6);
Map.addLayer(area1, {}, 'area');

// // Set the date
// //var year = '2019'
var startdate = '2000-01-01';
// var enddate = '2000-12-31';
var enddate = '2015-12-31';

// // MODIS NDVI scale is 0.0001, so we need to correct the scale
var NDVI = function(image) {
  return image.expression('float(b("NDVI")/10000)')
};

// var modis = ee.ImageCollection('MODIS/006/MOD13Q1')
//   .filterBounds(area1)
//   .filterDate(startdate,enddate);

// // Now we select only the NDVI from the list of bands
// var coll = modis.map(NDVI)


var mod13 = ee.ImageCollection('MODIS/061/MOD13Q1').filterBounds(area1);
var coll = mod13.select('NDVI').filterDate(startdate,enddate);
// var coll = coll_.map(NDVI)
    // .filter(ee.Filter.calendarRange(8, 9, 'month'));
// Map.addLayer(coll, {}, 'coll');
print(coll)
var afterFilter = ee.Filter.lessThan({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
});



var joined = ee.ImageCollection(ee.Join.saveAll('after').apply({
  primary: coll,
  secondary: coll,
  condition: afterFilter
}));


var sign = function(i, j) { // i and j are images
  return ee.Image(j).neq(i) // Zero case
      .multiply(ee.Image(j).subtract(i).clamp(-1, 1)).int();
};

var kendall = ee.ImageCollection(joined.map(function(current) {
  var afterCollection = ee.ImageCollection.fromImages(current.get('after'));
  return afterCollection.map(function(image) {
    // The unmask is to prevent accumulation of masked pixels that
    // result from the undefined case of when either current or image
    // is masked.  It won't affect the sum, since it's unmasked to zero.
    return ee.Image(sign(current, image)).unmask(0);
  });
  // Set parallelScale to avoid User memory limit exceeded.
}).flatten()).reduce('sum', 2).clip(area1);
var kendall =  kendall.toDouble()
var palette = ['red', 'white', 'green'];
// Stretch this as necessary.
// Map.addLayer(kendall, {palette: palette}, 'kendall');


// Values that are in a group (ties).  Set all else to zero.
var groups = coll.map(function(i) {
  var matches = coll.map(function(j) {
    return i.eq(j); // i and j are images.
  }).sum();
  return i.multiply(matches.gt(1));
});

// Compute tie group sizes in a sequence.  The first group is discarded.
var group = function(array) {
  var length = array.arrayLength(0);
  // Array of indices.  These are 1-indexed.
  var indices = ee.Image([1])
      .arrayRepeat(0, length)
      .arrayAccum(0, ee.Reducer.sum())
      .toArray(1);
  var sorted = array.arraySort();
  var left = sorted.arraySlice(0, 1);
  var right = sorted.arraySlice(0, 0, -1);
  // Indices of the end of runs.
  var mask = left.neq(right)
  // Always keep the last index, the end of the sequence.
      .arrayCat(ee.Image(ee.Array([[1]])), 0);
  var runIndices = indices.arrayMask(mask);
  // Subtract the indices to get run lengths.
  var groupSizes = runIndices.arraySlice(0, 1)
      .subtract(runIndices.arraySlice(0, 0, -1));
  return groupSizes;
};

// // See equation 2.6 in Sen (1968).
var factors = function(image) {
  return image.expression('b() * (b() - 1) * (b() * 2 + 5)');
};

var groupSizes = group(groups.toArray());
var groupFactors = factors(groupSizes);
var groupFactorSum = groupFactors.arrayReduce('sum', [0])
      .arrayGet([0, 0]);

var count = joined.count();

var kendallVariance = factors(count)
    .subtract(groupFactorSum)
    .divide(18)
    .float().clip(area1);
// Map.addLayer(kendallVariance, {}, 'kendallVariance');
print(kendallVariance)

// Compute Z-statistics.
var zero = kendall.multiply(kendall.eq(0));
var pos = kendall.multiply(kendall.gt(0)).subtract(1);
var neg = kendall.multiply(kendall.lt(0)).add(1);

var z = zero
    .add(pos.divide(kendallVariance.sqrt()))
    .add(neg.divide(kendallVariance.sqrt())).clip(area1);
// Map.addLayer(z, {min: -2, max: 2}, 'z');

// https://en.wikipedia.org/wiki/Error_function#Cumulative_distribution_function
function eeCdf(z) {
  return ee.Image(0.5)
      .multiply(ee.Image(1).add(ee.Image(z).divide(ee.Image(2).sqrt()).erf()));
}

function invCdf(p) {
  return ee.Image(2).sqrt()
      .multiply(ee.Image(p).multiply(2).subtract(1).erfInv());
}

// Compute P-values.
var p = ee.Image(1).subtract(eeCdf(z.abs())).clip(area1);
// Map.addLayer(p, {min: 0, max: 1}, 'p');

// Pixels that can have the null hypothesis (there is no trend) rejected.
// Specifically, if the true trend is zero, there would be less than 5%
// chance of randomly obtaining the observed result (that there is a trend).

Map.addLayer(p.lte(0.025), {min: 0, max: 1}, 'significant trends');

Export.image.toDrive({image: kendallVariance,
  description: "kendallVariance_trends",
  folder: "GEE_data",
  fileNamePrefix: "kendallVariance_trends",
  region: area1,
  scale: 250,
  crs: "EPSG:32643",
  maxPixels:9066245760,
  shardSize: 100,
  fileFormat: "GeoTIFF"
});


// Export.image.toDrive({image: p.lte(0.025),
//   description: "significant_trends",
//   folder: "GEE_data",
//   fileNamePrefix: "significant_trends",
//   region: area1,
//   scale: 250,
//   crs: "EPSG:32643",
//   maxPixels:9066245760,
//   shardSize: 100,
//   fileFormat: "GeoTIFF"
// });

// Export.image.toDrive({image: p,
//   description: "p_value_all",
//   folder: "GEE_data",
//   fileNamePrefix: "p_value_all",
//   region: area1,
//   scale: 250,
//   crs: "EPSG:32643",
//   maxPixels:9066245760,
//   shardSize: 100,
//   fileFormat: "GeoTIFF"
// });

// Export.image.toDrive({image: kendall,
//   description: "Kendall_trend",
//   folder: "GEE_data",
//   fileNamePrefix: "Kendall_trend",
//   region: area1,
//   scale: 250,
//   crs: "EPSG:32643",
//   maxPixels:9066245760,
//   shardSize: 100,
//   fileFormat: "GeoTIFF"
// });

